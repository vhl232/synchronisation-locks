package synchronization.locks.entities;

import lombok.AccessLevel;
import lombok.Getter;
import synchronization.locks.utils.Logger;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

/**
 * Класс семей, которые будут жить в квартирах в домах.
 */
@Getter
public class Family implements Runnable {
    @Getter(AccessLevel.NONE)                       // и тут тоже
    public static final String[] SURNAMES = {"Абрамов", "Авдеев", "Агапов", "Агафонов", "Агеев",
            "Акимов", "Аксенов", "Александров", "Алексеев", "Алехин", "Алешин", "Ананьев", "Андреев",
            "Андрианов", "Аникин", "Анисимов", "Анохин", "Антипов", "Антонов", "Артамонов", "Артемов",
            "Архипов", "Астафьев", "Астахов", "Афанасьев", "Бабушкин", "Баженов", "Балашов", "Баранов",
            "Барсуков", "Басов", "Безруков", "Беликов", "Белкин", "Белов", "Белоусов", "Беляев",
            "Беляков", "Березин", "Беспалов", "Бессонов", "Бирюков", "Блинов", "Блохин", "Бобров",
            "Богданов", "Богомолов", "Болдырев", "Большаков", "Бондарев", "Борисов", "Бородин",
            "Бочаров", "Булатов", "Булгаков", "Буров", "Быков", "Бычков", "Вавилов", "Васильев",
            "Вдовин", "Верещагин", "Вешняков", "Виноградов", "Винокуров", "Вишневский", "Владимиров",
            "Власов", "Волков", "Волошин", "Воробьев", "Воронин", "Воронков", "Воронов", "Воронцов",
            "Высоцкий", "Гаврилов", "Галкин", "Герасимов", "Гладков", "Глебов", "Глухов", "Глушков",
            "Голиков", "Голованов", "Головин", "Голубев", "Гончаров", "Горбачев", "Горбунов", "Гордеев",
            "Горелов", "Горлов", "Горохов", "Горшков", "Горюнов", "Горячев", "Грачев", "Греков",
            "Грибов", "Григорьев", "Гришин", "Громов", "Губанов", "Гуляев", "Гуров", "Гусев", "Гущин",
            "Давыдов", "Данилов", "Дегтярев", "Дементьев", "Демидов", "Демин", "Демьянов", "Денисов",
            "Дмитриев", "Добрынин", "Долгов", "Дорофеев", "Дорохов", "Дроздов", "Дружинин", "Дубинин",
            "Дубов", "Дубровин", "Дьяков", "Дьяконов", "Евдокимов", "Евсеев", "Егоров", "Ежов",
            "Елизаров", "Елисеев", "Емельянов", "Еремеев", "Еремин", "Ермаков", "Ермилов", "Ермолаев",
            "Ермолов", "Ерофеев", "Ершов", "Ефимов", "Ефремов", "Жаров", "Жданов", "Жилин", "Жуков",
            "Журавлев", "Завьялов", "Зайцев", "Захаров", "Зверев", "Звягинцев", "Зеленин", "Зимин",
            "Зиновьев", "Злобин", "Золотарев", "Золотов", "Зорин", "Зотов", "Зубков", "Зубов", "Зуев",
            "Зыков", "Иванов", "Игнатов", "Игнатьев", "Измайлов", "Ильин", "Ильинский", "Исаев",
            "Исаков", "Казаков", "Казанцев", "Калачев", "Калашников", "Калинин", "Калмыков", "Калугин",
            "Капустин", "Карасев", "Карпов", "Карташов", "Касаткин", "Касьянов", "Киреев", "Кириллов",
            "Киселев", "Климов", "Клюев", "Князев", "Ковалев", "Кожевников", "Козин", "Козлов",
            "Козловский", "Козырев", "Колесников", "Колесов", "Колосов", "Колпаков", "Кольцов",
            "Комаров", "Комиссаров", "Кондратов", "Кондратьев", "Кондрашов", "Коновалов", "Кононов",
            "Константинов", "Копылов", "Корнев", "Корнеев", "Корнилов", "Коровин", "Королев",
            "Корольков", "Коротков", "Корчагин", "Коршунов", "Косарев", "Костин", "Котов", "Кочергин",
            "Кочетков", "Кочетов", "Кошелев", "Кравцов", "Краснов", "Круглов", "Крылов", "Крюков",
            "Крючков", "Кудрявцев", "Кудряшов", "Кузин", "Кузнецов", "Кузьмин", "Кукушкин", "Кулагин",
            "Кулаков", "Кулешов", "Куликов", "Куприянов", "Курочкин", "Лаврентьев", "Лавров", "Лазарев",
            "Лапин", "Лаптев", "Лапшин", "Ларин", "Ларионов", "Латышев", "Лебедев", "Левин", "Леонов",
            "Леонтьев", "Литвинов", "Лобанов", "Логинов", "Лопатин", "Лосев", "Лукин", "Лукьянов",
            "Лыков", "Львов", "Любимов", "Майоров", "Макаров", "Макеев", "Максимов", "Малахов",
            "Малинин", "Малышев", "Мальцев", "Маркелов", "Маркин", "Марков", "Мартынов", "Масленников",
            "Маслов", "Матвеев", "Медведев", "Мельников", "Меркулов", "Мешков", "Мещеряков", "Минаев",
            "Минин", "Миронов", "Митрофанов", "Михайлов", "Михеев", "Моисеев", "Молчанов", "Моргунов",
            "Морозов", "Москвин", "Муравьев", "Муратов", "Мухин", "Назаров", "Наумов", "Некрасов",
            "Нестеров", "Нефедов", "Нечаев", "Никитин", "Никифоров", "Николаев", "Никольский", "Никонов",
            "Никулин", "Новиков", "Носков", "Носов", "Овсянников", "Овчинников", "Одинцов", "Озеров",
            "Окулов", "Олейников", "Орехов", "Орлов", "Осипов", "Островский", "Павлов", "Павловский",
            "Панин", "Панков", "Панкратов", "Панов", "Пантелеев", "Панфилов", "Парамонов", "Парфенов",
            "Пастухов", "Пахомов", "Петров", "Петровский", "Петухов", "Пименов", "Пирогов", "Платонов",
            "Плотников", "Поздняков", "Покровский", "Поликарпов", "Поляков", "Пономарев", "Попов",
            "Постников", "Потапов", "Прокофьев", "Прохоров", "Пугачев", "Раков", "Рогов", "Родин",
            "Родионов", "Рожков", "Розанов", "Романов", "Рубцов", "Рудаков", "Руднев", "Румянцев",
            "Русаков", "Русанов", "Рыбаков", "Рыжов", "Рябинин", "Рябов", "Савельев", "Савин",
            "Савицкий", "Сазонов", "Сальников", "Самойлов", "Самсонов", "Сафонов", "Сахаров",
            "Свешников", "Свиридов", "Севастьянов", "Седов", "Селезнев", "Селиванов", "Семенов",
            "Семин", "Сергеев", "Серебряков", "Серов", "Сидоров", "Сизов", "Симонов", "Синицын",
            "Ситников", "Скворцов", "Смирнов", "Снегирев", "Соболев", "Соколов", "Соловьев", "Сомов",
            "Сорокин", "Сотников", "Софронов", "Спиридонов", "Стариков", "Старостин", "Степанов",
            "Столяров", "Субботин", "Суворов", "Судаков", "Сурков", "Суслов", "Суханов", "Сухарев",
            "Сухов", "Сычев", "Тарасов", "Терентьев", "Терехов", "Тимофеев", "Титов", "Тихомиров",
            "Тихонов", "Ткачев", "Токарев", "Толкачев", "Третьяков", "Трифонов", "Троицкий",
            "Трофимов", "Трошин", "Туманов", "Уваров", "Ульянов", "Усов", "Успенский", "Устинов",
            "Уткин", "Ушаков", "Фадеев", "Федоров", "Федосеев", "Федосов", "Федотов", "Фетисов",
            "Филатов", "Филимонов", "Филиппов", "Фирсов", "Фокин", "Фомин", "Фомичев", "Фролов",
            "Харитонов", "Хомяков", "Хохлов", "Хромов", "Худяков", "Царев", "Цветков", "Чеботарев",
            "Черепанов", "Черкасов", "Чернов", "Черный", "Черных", "Чернышев", "Черняев", "Чесноков",
            "Чижов", "Чистяков", "Чумаков", "Шаповалов", "Шапошников", "Шаров", "Швецов", "Шевелев",
            "Шевцов", "Шестаков", "Шилов", "Широков", "Ширяев", "Шишкин", "Шмелев", "Шубин", "Шувалов",
            "Шульгин", "Щеглов", "Щербаков", "Щукин", "Юдин", "Яковлев", "Яшин"};
    @Getter(AccessLevel.NONE)
    private static long LATENCY = 100;
    private String name;                            // фамилия семьи
    private List<Person> members;                   // список членов семьи
    private Flat flat;                              // квартира, в которой семья живет
    @Getter(AccessLevel.NONE)                       // тут геттер не нужен
    private Logger log = Logger.getInstance();

    /**
     * Конструктор для семьи
     *
     * @param name    фамилия семьи
     * @param members члены семьи
     */
    public Family(String name, Person... members) {
        // устанавливаем фамилию
        this.name = name;

        // если переданный параметр не пуст
        if (members != null && members.length > 0) {
            // трансформируем массив к списку и на основе его создаем новый список для членов семьи
            this.members = new LinkedList<>(Arrays.asList(members));
        } else {
            // если же не передали ни одного жильца - создаем пустой список
            this.members = new LinkedList<>();
        }
        log.write("Создана " + this);
        //new Thread(this).start();       // запускаем семью
    }

    static void setLATENCY(long latency) {
        LATENCY = latency;
    }

    /**
     * Фабричный метод для создания случайной семьи
     *
     * @return объект созданной семьи
     */
    public static Family generateFamily() {
        Random rnd = new Random();

        // выбираем случайную фамилию
        String familyName = SURNAMES[(int) (Math.random() * SURNAMES.length)];

        // создаем список членов семьи
        List<Person> members = new LinkedList<>();
        // добавляем первого (взрослый, без разницы какого пола)
        members.add(Person.generatePerson(familyName, true, null));
        // пока нам будет везти - будем создавать еще членов семьи (абсолютно случайных)
        while (rnd.nextBoolean()) {
            members.add(Person.generatePerson(familyName, rnd.nextBoolean(), rnd.nextBoolean()));
        }

        // создаем и возвращаем объект семьи из определенных выше данных
        return new Family(familyName, members.toArray(new Person[members.size()]));
    }

    /**
     * Позволяет назначить этой семье квартиру
     * @param flat квартира, в которой будет жить семья
     */
    public synchronized void setFlat(Flat flat) {
        this.flat = flat;
    }

    /**
     * Позволяет добавить нового члена семьи
     * @param member новый член семьи
     */
    public void addMember(Person member) {
        member.setLastName(name);           // переписываем ему фамилию той, которая является фамилией семьи
        members.add(member);                // добавляем к списку членов семьи
    }

    /**
     * Подсчет уровня дохода на каждого члена семьи
     *
     * @return уровень дохода
     */
    public synchronized double getIncomePerMember() {
        return members.stream().collect(Collectors.averagingDouble(Person::getIncome));
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        members.forEach((person) -> sb.append(person.getFirstName()).append(", "));
        if (sb.length() > 2) sb.setLength(sb.length() - 2);
        return "Семья " +
                (name.endsWith("их") ? name.substring(name.lastIndexOf("ий")) + "их" : name + "ых")
                + (sb.length() > 0 ? ": " + sb.toString() : "");
    }

    @Override
    public void run() {
        // фиксируем ссылку на тред, который сейчас крутит этот метод
        final Thread thisThread = Thread.currentThread();

        // ждем пока семью не поселят в квартиру
        while (flat == null && !thisThread.isInterrupted()){
            try {
                Thread.sleep(LATENCY);
            } catch (InterruptedException e) {
                thisThread.interrupt();
            }
        }

        // начинаем жить в квартире
        while (members.size() > 0 && !thisThread.isInterrupted()) {
            try {
                Thread.sleep(LATENCY);
            } catch (InterruptedException e) {
                thisThread.interrupt();
            }

            // убираем из семьи умерших людей
            members.forEach((p) -> {
                if (!p.isAlive()) members.remove(p);
            });

            // если семья жива и для нового человека есть свободная комната в квартире
            if (isAlive() && members.size() < flat.getRoomsNumber())
                makeBaby();     // пытаемся завести ребенка
        }

        // если мы дошли до этого места и тред еще не остановлен - значит не осталось ни одного живого члена семьи
        if (!thisThread.isInterrupted()) {
            flat = null;        // освобождаем жилплощадь
            log.write(this + " полностью вымерла.");
        }
    }

    /**
     * Проверяет жива ли семья. Если в семье более одного жильца - значит она жива
     * @return true если в семье есть хотя бы один член, false если все умерли
     */
    private synchronized boolean isAlive() {
        return members.size() > 0;
    }

    /**
     * Позволяет завести семье ребенка
     */
    private void makeBaby() {
        // флаги, обозначающие есть ли в семье мужчина и женщина
        final boolean[] hasMaleOrFemale = {false, false};

        synchronized (this) {
            List<Person> parents = members.stream()
                    .filter((p) -> p.getAge() >= 18 && p.getAge() <= 60)  // отбираем членов семьи подходящих по возрасту
                    .filter(person -> {
                        if (person.getSex() == Person.Sex.MALE && !hasMaleOrFemale[0]) {
                            // если этот человек мужчина и у нас еще не было мужчин - отмечаем что нашли мужчину
                            hasMaleOrFemale[0] = true;
                            // и возвращаем true чтоб этот мужчина попал в новый список
                            return true;
                        }
                        if (person.getSex() == Person.Sex.FEMALE && !hasMaleOrFemale[1]) {
                            // если этот человек женщина и у нас еще не было женщин - отмечаем что нашли женщину
                            hasMaleOrFemale[1] = true;
                            // и возвращаем true чтоб эта женщина попала в новый список
                            return true;
                        }

                        return false;       // в остальных случаях возвращаем false
                    })
                    .collect(Collectors.toList());      // собираем результаты в список

            // если список с возможными родителями состоит из двух людей (мужчина и женщина)
            // и их разница в возрасте не более чем 15 лет
            if (parents.size() == 2
                    && Math.abs(parents.get(0).getAge() - parents.get(1).getAge()) <= 15) {
                // создаем нового члена семьи и добавляем его к существующим членам
                this.members.add(Person.generatePerson(name, false, null));
            }
        }
    }
}
